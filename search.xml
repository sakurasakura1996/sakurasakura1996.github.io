<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>google_colab 实验yolov3</title>
    <url>/2020/03/30/google%20colab%E5%AE%9E%E9%AA%8CYOLOv3/</url>
    <content><![CDATA[<p>Github代码地址：<a href="https://github.com/sakurasakura1996/PyTorch-YOLOv3" target="_blank" rel="noopener">https://github.com/sakurasakura1996/PyTorch-YOLOv3</a></p>
<p>配套的教程还是比较详细的，就是教程是根据coco数据集来训练的，我们要先下载coco数据集，train加val的都特么快20G了，我不能保存在goole drive里面，所以下载下来一旦掉线就木了，难受啊，这里记录的时候还没有下好数据集，这里主要是记录后面训练自己的自定义的数据集，他这个数据集的布局好像不太常见，所以要把虫的数据集改为适用的数据集还是比较麻烦的。</p>
<h1 id="自定义数据制作"><a href="#自定义数据制作" class="headerlink" title="自定义数据制作"></a>自定义数据制作</h1><p>需要的改动是：</p>
<ul>
<li>所有的数据集放在data/custom文件夹下</li>
<li>custom文件夹下有images文件夹，labels文件夹，classes.names文件，train.txt,valid.txt</li>
<li>images文件夹下就直接放所有的图片</li>
<li>labels文件夹下放的是txt文件，目前还不知道应该以什么样的方式来存储，<ul>
<li>有可能是images文件夹下的每张图片都对应一个同名的txt文件在labels文件夹下，标注的是该图片中的目标区域信息 格式为  类别索引（从0开始），中心点横坐标，中心点纵坐标，宽，高   五个数据，这张图片中有几个框，就有几行这样的数据</li>
<li>想了下，应该没有其他情况了，就是这样做的，所以要改动的话就是遍历原来数据集中的xml文件，找出目标框，然后把xmin，ymin，xmax，ymax这样的值转换为中心点坐标值和宽高的格式，而且把这些值都转换为0-1的格式i，也就是坐标的比例。</li>
</ul>
</li>
<li>classes.names文件内容比较简单，就是存放的几种数据集的类别</li>
<li>train.txt   存放训练图片的路径，每张图片的路径都是一行</li>
<li>valid.txt  存放验证图片的路径，每张图片的路径都是一行</li>
</ul>
<p>今晚看来这个数据集是下载不动了。没实体电脑难受啊。</p>
<p>OK，2020.3.15开始制作数据集啦</p>
<p>下面代码是把所有的xml文件读入，然后进行数据转换，生成对应xml同名的txt文件。并把要求的数据进行计算生成写入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">现在想用google colab来实验YOLOv3，但是看github这个作者的代码要求的自定义数据格式还是和原来训练的faster rcnn制作的数据集</span><br><span class="line">很不一样，所以就开始制作数据集了</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import os</span><br><span class="line">import os.path</span><br><span class="line">import xml.dom.minidom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">path &#x3D; &quot;C:&#x2F;Users&#x2F;Administrator&#x2F;Desktop&#x2F;AI_studio&#x2F;PaddleDetection&#x2F;dataset&#x2F;insect&#x2F;Annotations&quot;</span><br><span class="line">write_path &#x3D; &quot;C:&#x2F;Users&#x2F;Administrator&#x2F;Desktop&#x2F;pytorch-yolov3&#x2F;custom&#x2F;labels&quot;</span><br><span class="line">files &#x3D; os.listdir(path)  # 得到文件夹下所有文件名称</span><br><span class="line"></span><br><span class="line">label_dict &#x3D; &#123;</span><br><span class="line">    &#39;Boerner&#39;:0,</span><br><span class="line">    &#39;linnaeus&#39;:1,</span><br><span class="line">    &#39;armandi&#39;:2,</span><br><span class="line">    &#39;coleoptera&#39;:3,</span><br><span class="line">    &#39;Linnaeus&#39;:4,</span><br><span class="line">    &#39;Leconte&#39;:5,</span><br><span class="line">    &#39;acuminatus&#39;:6</span><br><span class="line">&#125;</span><br><span class="line">for filename in files:</span><br><span class="line">    dom &#x3D; xml.dom.minidom.parse(os.path.join(path,&#39;1.xml&#39;))</span><br><span class="line">    root &#x3D; dom.documentElement</span><br><span class="line">    width &#x3D; int(root.getElementsByTagName(&#39;width&#39;)[0].firstChild.data)</span><br><span class="line">    height &#x3D; int(root.getElementsByTagName(&#39;height&#39;)[0].firstChild.data)</span><br><span class="line">    name &#x3D; root.getElementsByTagName(&#39;name&#39;)</span><br><span class="line">    xmin &#x3D; root.getElementsByTagName(&#39;xmin&#39;)</span><br><span class="line">    ymin &#x3D; root.getElementsByTagName(&#39;ymin&#39;)</span><br><span class="line">    xmax &#x3D; root.getElementsByTagName(&#39;xmax&#39;)</span><br><span class="line">    ymax &#x3D; root.getElementsByTagName(&#39;ymax&#39;)</span><br><span class="line">    # for i in range(len(xmin)):</span><br><span class="line">    #     print(xmin[i].firstChild.data)</span><br><span class="line">    #     print(ymin[i].firstChild.data)</span><br><span class="line">    #     print(xmax[i].firstChild.data)</span><br><span class="line">    #     print(ymax[i].firstChild.data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    with open(os.path.join(write_path,filename.split(&#39;.&#39;)[0]+&#39;.&#39;+&#39;txt&#39;),&#39;w&#39;,encoding&#x3D;&#39;UTF-8&#39;) as fh:</span><br><span class="line">    # 然后根据每一个框的上面五个信息，计算出格式为  index(目标框所属分类的索引）,中心点横坐标，中心点纵坐标，宽，高</span><br><span class="line">        for i in range(len(name)):</span><br><span class="line">            idx &#x3D; label_dict[name[i].firstChild.data]</span><br><span class="line">            center_x &#x3D; round((int(xmin[i].firstChild.data) + (int(xmax[i].firstChild.data)-int(xmin[i].firstChild.data))&#x2F;2)&#x2F;width,3)</span><br><span class="line">            center_y &#x3D; round((int(ymin[i].firstChild.data) + (int(ymax[i].firstChild.data)-int(ymin[i].firstChild.data))&#x2F;2)&#x2F;height,3)</span><br><span class="line">            width_gt &#x3D; round((int(xmax[i].firstChild.data)-int(xmin[i].firstChild.data))&#x2F;width,8)</span><br><span class="line">            height_gt &#x3D; round((int(ymax[i].firstChild.data)-int(ymin[i].firstChild.data))&#x2F;height, 8)</span><br><span class="line">            print(idx,center_x,center_y,width_gt,height_gt)</span><br><span class="line">            str_temp &#x3D; str(idx) +&#39; &#39; + str(center_x) +&#39; &#39; + str(center_y) +&#39; &#39; + str(width_gt) +&#39; &#39; + str(height_gt)+ &#39;\n&#39;</span><br><span class="line">            fh.write(str_temp,)</span><br><span class="line">    fh.close()</span><br></pre></td></tr></table></figure>
<p>这样就搞定啦</p>
<p>下面是写入train.txt 和 valid.txt，还是遇到了一些小问题的，在代码注释中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">这里的代码是制作yolo适用的数据集时，制作的train.txt 和 valid.txt</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import os</span><br><span class="line">import os.path</span><br><span class="line"></span><br><span class="line">train_path &#x3D; &quot;C:&#x2F;Users&#x2F;Administrator&#x2F;Desktop&#x2F;AI_studio&#x2F;PaddleDetection&#x2F;dataset&#x2F;insect&#x2F;ImageSets&#x2F;Main&#x2F;train.txt&quot;</span><br><span class="line">valid_path &#x3D; &quot;C:&#x2F;Users&#x2F;Administrator&#x2F;Desktop&#x2F;AI_studio&#x2F;PaddleDetection&#x2F;dataset&#x2F;insect&#x2F;ImageSets&#x2F;Main&#x2F;val.txt&quot;</span><br><span class="line"></span><br><span class="line">write_train_path &#x3D; &quot;C:&#x2F;Users&#x2F;Administrator&#x2F;Desktop&#x2F;pytorch-yolov3&#x2F;custom&#x2F;train.txt&quot;</span><br><span class="line">write_valid_path &#x3D; &quot;C:&#x2F;Users&#x2F;Administrator&#x2F;Desktop&#x2F;pytorch-yolov3&#x2F;custom&#x2F;valid.txt&quot;</span><br><span class="line">write_train_list &#x3D;[]</span><br><span class="line">write_valid_list &#x3D; []</span><br><span class="line">with open(train_path,mode&#x3D;&#39;r&#39;) as f:</span><br><span class="line">    flist &#x3D; f.readlines()</span><br><span class="line">    for line in flist:</span><br><span class="line">        # 终于知道为什么下面自动换行了，这里输入print(line)就知道了，这里的line自带了换行符，所以 .jpg就只能</span><br><span class="line">        # 换行显示，可以先转换成int，再转换成str就可以了，OK</span><br><span class="line">        line &#x3D; &#39;data&#x2F;custom&#x2F;images&#x2F;&#39;+str(int(line))+&#39;.jpg\n&#39; # 不知道为什么这里写入的时候会把  .jpg换行写入，蒙蔽了</span><br><span class="line">        write_train_list.append(line)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">with open(write_train_path,mode&#x3D;&#39;w&#39;,encoding&#x3D;&#39;UTF-8&#39;) as f:</span><br><span class="line">    for line in write_train_list:</span><br><span class="line">        f.write(line)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">with open(valid_path,mode&#x3D;&#39;r&#39;) as f:</span><br><span class="line">    flist &#x3D; f.readlines()</span><br><span class="line">    for line in flist:</span><br><span class="line">        line &#x3D; str(&#39;data&#x2F;custom&#x2F;images&#x2F;&#39;+str(int(line))+&#39;.jpg\n&#39;)</span><br><span class="line">        write_valid_list.append(line)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">with open(write_valid_path,mode&#x3D;&#39;w&#39;,encoding&#x3D;&#39;UTF-8&#39;) as f:</span><br><span class="line">    for line in write_valid_list:</span><br><span class="line">        f.write(line)</span><br></pre></td></tr></table></figure>
<p>f.close()</p>
<h1 id="2020-4-1日训练调试"><a href="#2020-4-1日训练调试" class="headerlink" title="2020.4.1日训练调试"></a>2020.4.1日训练调试</h1><p>好久没做，今天再调试一下。因为上次调试的结果出错了，所以就没搞了。</p>
<p>结果这次跑是跑通了但是 检测结果 太垃圾了，完全不对啊，上次faster rcnn的结果其实还可以。所以我怀疑上面的自定义数据集的目标框的坐标是不是没有搞对。后期再检查一下。今天先记录一下。</p>
<p>调试过程中遇到了几个问题，在github上面的issue中都可以找到问题所在，这里就不记录了。</p>
<p>github的交流区还是很好的。</p>
<p>再记录下检测数据不准确的可能原因。我感觉可能是我标注数据的问题，因为原来AI_Studio的数据集中目标框的信息是左上角和右小角的x，y坐标。而yolov3需要的目标框的信息是中心点坐标和宽度高度，且四个数据都是经过标准化之后的显示，这里涉及到一个坐标系的问题，一张图片的哪个地方才是（0,0）点，我可能和该程序了解的不一样，所以后续还要确认一下是不是该问题，因为预测样本结果完全不正确啊。同时对比了一下该程序和之前实验的faster rcnn结果，yolov3将原图像进行了resize，分辨率变低了，faster rcnn分辨率要高一些。加油调试一下这次</p>
<p>遇到的问题！</p>
<p>现在的情况如下：后续结果好了，再来记录。</p>
<p><img src="https://uploader.shimo.im/f/2ogt8EZaDCAVbgab.jpg!thumbnail" alt="图片"></p>
]]></content>
      <categories>
        <category>学习</category>
        <category>AI</category>
        <category>DL</category>
      </categories>
      <tags>
        <tag>YOLOv3</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode problem460 LFU缓存</title>
    <url>/2020/04/05/460%20LFU%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>设计并实现最不经常使用（LFU）缓存的数据结构。它应该支持以下操作：get 和 put。</p>
<p>get(key) - 如果键存在于缓存中，则获取键的值（总是正数），否则返回 -1。</p>
<p>put(key, value) - 如果键不存在，请设置或插入值。当缓存达到其容量时，它应该在插入新项目之前，使最不经常使用的项目无效。在此问题中，当存在平局（即两个或更多个键具有相同使用频率）时，最近最少使用的键将被去除。</p>
<p>进阶：</p>
<p>你是否可以在 O(1) 时间复杂度内执行两项操作？</p>
<p>示例：</p>
<p>LFUCache cache = new LFUCache( 2 /<em> capacity (缓存容量) </em>/ );</p>
<p>cache.put(1, 1);</p>
<p>cache.put(2, 2);</p>
<p>cache.get(1);       // 返回 1</p>
<p>cache.put(3, 3);    // 去除 key 2</p>
<p>cache.get(2);       // 返回 -1 (未找到key 2)</p>
<p>cache.get(3);       // 返回 3</p>
<p>cache.put(4, 4);    // 去除 key 1</p>
<p>cache.get(1);       // 返回 -1 (未找到 key 1)</p>
<p>cache.get(3);       // 返回 3</p>
<p>cache.get(4);       // 返回 4</p>
<p>来源：力扣（LeetCode）</p>
<p>链接：<a href="https://leetcode-cn.com/problems/lfu-cache" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lfu-cache</a></p>
<p>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>开始觉得可以加入一个有序字典，但是后来实现的时候还是不够用。</p>
<p>且看官方题解吧，自己的编程能力还是太水了：</p>
<p>方法二：双哈希表</p>
<p>思路和算法</p>
<p>我们定义两个哈希表，第一个 freq_table 以频率 freq 为索引，每个索引存放一个双向链表，这个链表里存放所有使用频率为 freq 的缓存，缓存里存放三个信息，分别为键 key，值 value，以及使用频率 freq。第二个 key_table 以键值 key 为索引，每个索引存放对应缓存在 freq_table 中链表里的内存地址，这样我们就能利用两个哈希表来使得两个操作的时间复杂度均为 O(1)O(1)。同时需要记录一个当前缓存最少使用的频率 minFreq，这是为了删除操作服务的。</p>
<p>对于 get(key) 操作，我们能通过索引 key 在 key_table 中找到缓存在 freq_table 中的链表的内存地址，如果不存在直接返回 -1，否则我们能获取到对应缓存的相关信息，这样我们就能知道缓存的键值还有使用频率，直接返回 key 对应的值即可。</p>
<p>但是我们注意到 get 操作后这个缓存的使用频率加一了，所以我们需要更新缓存在哈希表 freq_table 中的位置。已知这个缓存的键 key，值 value，以及使用频率 freq，那么该缓存应该存放到 freq_table 中 freq + 1 索引下的链表中。所以我们在当前链表中 O(1)O(1) 删除该缓存对应的节点，根据情况更新 minFreq 值，然后将其O(1)O(1) 插入到 freq + 1 索引下的链表头完成更新。这其中的操作复杂度均为 O(1)O(1)。你可能会疑惑更新的时候为什么是插入到链表头，这其实是为了保证缓存在当前链表中从链表头到链表尾的插入时间是有序的，为下面的删除操作服务。</p>
<p>对于 put(key, value) 操作，我们先通过索引 key在 key_table 中查看是否有对应的缓存，如果有的话，其实操作等价于 get(key) 操作，唯一的区别就是我们需要将当前的缓存里的值更新为 value。如果没有的话，相当于是新加入的缓存，如果缓存已经到达容量，需要先删除最近最少使用的缓存，再进行插入。</p>
<p>先考虑插入，由于是新插入的，所以缓存的使用频率一定是 1，所以我们将缓存的信息插入到 freq_table 中 1 索引下的列表头即可，同时更新 key_table[key] 的信息，以及更新 minFreq = 1。</p>
<p>那么剩下的就是删除操作了，由于我们实时维护了 minFreq，所以我们能够知道 freq_table 里目前最少使用频率的索引，同时因为我们保证了链表中从链表头到链表尾的插入时间是有序的，所以 freq_table[minFreq] 的链表中链表尾的节点即为使用频率最小且插入时间最早的节点，我们删除它同时根据情况更新 minFreq ，整个时间复杂度均为 O(1)O(1)。</p>
<p>作者：LeetCode-Solution</p>
<p>链接：<a href="https://leetcode-cn.com/problems/lfu-cache/solution/lfuhuan-cun-by-leetcode-solution/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lfu-cache/solution/lfuhuan-cun-by-leetcode-solution/</a></p>
<p>来源：力扣（LeetCode）</p>
<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Node:</span><br><span class="line">    def __init__(self, key, val, pre&#x3D;None, nex&#x3D;None, freq&#x3D;0):</span><br><span class="line">        self.pre &#x3D; pre</span><br><span class="line">        self.nex &#x3D; nex</span><br><span class="line">        self.freq &#x3D; freq</span><br><span class="line">        self.val &#x3D; val</span><br><span class="line">        self.key &#x3D; key</span><br><span class="line">        </span><br><span class="line">    def insert(self, nex):  # 双向链表的插入节点操作</span><br><span class="line">        nex.pre &#x3D; self</span><br><span class="line">        nex.nex &#x3D; self.nex</span><br><span class="line">        self.nex.pre &#x3D; nex</span><br><span class="line">        self.nex &#x3D; nex</span><br><span class="line">    </span><br><span class="line">def create_linked_list():  # 空链表</span><br><span class="line">    head &#x3D; Node(0, 0)</span><br><span class="line">    tail &#x3D; Node(0, 0)</span><br><span class="line">    head.nex &#x3D; tail</span><br><span class="line">    tail.pre &#x3D; head</span><br><span class="line">    return (head, tail)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class LFUCache:</span><br><span class="line">    def __init__(self, capacity: int):</span><br><span class="line">        self.capacity &#x3D; capacity</span><br><span class="line">        self.size &#x3D; 0</span><br><span class="line">        self.minFreq &#x3D; 0</span><br><span class="line">        self.freqMap &#x3D; collections.defaultdict(create_linked_list)</span><br><span class="line">        self.keyMap &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def delete(self, node):</span><br><span class="line">        if node.pre:</span><br><span class="line">            node.pre.nex &#x3D; node.nex</span><br><span class="line">            node.nex.pre &#x3D; node.pre</span><br><span class="line">            if node.pre is self.freqMap[node.freq][0] and node.nex is self.freqMap[node.freq][-1]:</span><br><span class="line">                self.freqMap.pop(node.freq)</span><br><span class="line">        return node.key</span><br><span class="line">        </span><br><span class="line">    def increase(self, node):</span><br><span class="line">        node.freq +&#x3D; 1</span><br><span class="line">        self.delete(node)</span><br><span class="line">        self.freqMap[node.freq][-1].pre.insert(node)</span><br><span class="line">        if node.freq &#x3D;&#x3D; 1:</span><br><span class="line">            self.minFreq &#x3D; 1</span><br><span class="line">        elif self.minFreq &#x3D;&#x3D; node.freq - 1:</span><br><span class="line"># 如果这个新调用的node freq值原来是最小freq值，那么就要看他原来所在的双链表中</span><br><span class="line">#除了head tail结点外是否还有节点，如果有就不动，如果没有，那么minfreq也要+1了</span><br><span class="line">            head, tail &#x3D; self.freqMap[node.freq - 1]</span><br><span class="line">            if head.nex is tail:</span><br><span class="line">                self.minFreq &#x3D; node.freq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def get(self, key: int) -&gt; int:</span><br><span class="line">        if key in self.keyMap:</span><br><span class="line">            self.increase(self.keyMap[key])</span><br><span class="line">            return self.keyMap[key].val</span><br><span class="line">        return -1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def put(self, key: int, value: int) -&gt; None:</span><br><span class="line">        if self.capacity !&#x3D; 0:</span><br><span class="line">            if key in self.keyMap:</span><br><span class="line">                node &#x3D; self.keyMap[key]</span><br><span class="line">                node.val &#x3D; value</span><br><span class="line">            else:</span><br><span class="line">                node &#x3D; Node(key, value)</span><br><span class="line">                self.keyMap[key] &#x3D; node</span><br><span class="line">                self.size +&#x3D; 1</span><br><span class="line">            if self.size &gt; self.capacity:</span><br><span class="line">                self.size -&#x3D; 1</span><br><span class="line">                deleted &#x3D; self.delete(self.freqMap[self.minFreq][0].nex)</span><br><span class="line">                self.keyMap.pop(deleted)</span><br><span class="line">            self.increase(node)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">作者：LeetCode-Solution</span><br><span class="line">链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;lfu-cache&#x2F;solution&#x2F;lfuhuan-cun-by-leetcode-solution&#x2F;</span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>
<p>这里面的思考过程对我来说还是比较复杂的，日后一定要来重写</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>数据结构与算法</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>google_colab 调试faster rcnn识虫</title>
    <url>/2020/03/30/google-colab%E8%B0%83%E8%AF%95faster%20rcnn%E8%AF%86%E8%99%AB/</url>
    <content><![CDATA[<h1 id="一、本地数据集的制作"><a href="#一、本地数据集的制作" class="headerlink" title="一、本地数据集的制作"></a>一、本地数据集的制作</h1><p>首先从百度PandlePandle平台上获得了虫子的数据，原先已经在google colab上跑通了faster rcnn的源码，跑通的部分记录放在CSDN上面的。那部分的过程主要还是根据别人的教程一步一步来实现的，训练测试的数据是VOC2007</p>
<p>所以这里想自己将数据集格式改成VOC2007格式的，然后进行数据集的替换。然后训练测试来一发，看看自定义数据集的效果。</p>
<h2 id="数据集的更改："><a href="#数据集的更改：" class="headerlink" title="数据集的更改："></a>数据集的更改：</h2><ul>
<li>xml文件的修改<ul>
<li>xml文件中的几个标签内容要改</li>
</ul>
</li>
<li>虫子图片的格式为jpeg，后面替换数据集后发现程序报错，要把图片格式改成jpg格式的。这个比较简单，命令行界面下，到图片集的目录下， 然后  ren <em>.jpeg </em>.jpg</li>
<li>xml文件中标签内容批量修改时，用python批量修改后，这里想强调几点<ul>
<li>修改完成时，写入过程中保证编码方式还是原来的 UTF-8 编码</li>
<li>用记事本打开xml文件时会发现下方的信息   Unix(LF)  UTF-8。但是用python批量修改之后再打开，变成了windows(CR LF)。这里应该是换行的符号不同。还不知道对实验有没有影响。</li>
</ul>
</li>
<li>然后还想记下一些以后可能用得到的代码：<h2 id="批量修改文件夹下所有xml文件中的标签信息"><a href="#批量修改文件夹下所有xml文件中的标签信息" class="headerlink" title="批量修改文件夹下所有xml文件中的标签信息"></a>批量修改文件夹下所有xml文件中的标签信息</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xml.dom.minidom</span><br><span class="line"></span><br><span class="line">path = <span class="string">"C:/Users/Administrator/Desktop/AI_studio/PaddleDetection/dataset/insect/Annotations"</span></span><br><span class="line"></span><br><span class="line">files = os.listdir(path)  <span class="comment"># 得到文件夹下所有文件名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> xmlFile <span class="keyword">in</span> files:  <span class="comment"># 遍历文件夹</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(xmlFile):  <span class="comment"># 判断是否是文件夹,不是文件夹才打开</span></span><br><span class="line"></span><br><span class="line">        print(xmlFile)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将获取的xml文件名送入到dom解析</span></span><br><span class="line"></span><br><span class="line">        dom = xml.dom.minidom.parse(os.path.join(path, xmlFile))  <span class="comment"># 输入xml文件具体路径</span></span><br><span class="line"></span><br><span class="line">        root = dom.documentElement</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取标签&lt;name&gt;以及&lt;folder&gt;的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># name = root.getElementsByTagName('name')</span></span><br><span class="line"></span><br><span class="line">        folder = root.getElementsByTagName(<span class="string">'folder'</span>)</span><br><span class="line"></span><br><span class="line">        filename = root.getElementsByTagName(<span class="string">'filename'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对每个xml文件的多个同样的属性值进行修改。此处将每一个&lt;name&gt;属性修改为plane,每一个&lt;folder&gt;属性修改为VOC2007</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># for i in range(len(name)):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#     print(name[i].firstChild.data)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#     name[i].firstChild.data = 'plane'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#     print(name[i].firstChild.data)</span></span><br><span class="line"></span><br><span class="line">        folder[<span class="number">0</span>].firstChild.data = <span class="string">"VOC2007"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(filename)):</span><br><span class="line"></span><br><span class="line">            <span class="comment"># print(filename[i].firstChild.data)</span></span><br><span class="line"></span><br><span class="line">            lista = filename[i].firstChild.data.split(<span class="string">'.'</span>)</span><br><span class="line"></span><br><span class="line">            ans = lista[<span class="number">0</span>]+<span class="string">'.'</span>+<span class="string">"jpg"</span></span><br><span class="line"></span><br><span class="line">            filename[i].firstChild.data = ans</span><br><span class="line"></span><br><span class="line">            <span class="comment"># print(ans)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将属性存储至xml文件中</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> open(os.path.join(path, xmlFile), <span class="string">'w'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> fh:   <span class="comment"># 门道相当多啊</span></span><br><span class="line"></span><br><span class="line">            dom.writexml(fh)</span><br><span class="line"></span><br><span class="line">            print(<span class="string">'已写入'</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="将文件夹下所有图片名读取出来，写入txt文件中"><a href="#将文件夹下所有图片名读取出来，写入txt文件中" class="headerlink" title="将文件夹下所有图片名读取出来，写入txt文件中"></a>将文件夹下所有图片名读取出来，写入txt文件中</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line">results = set()</span><br><span class="line"></span><br><span class="line">path = <span class="string">"C:/Users/Administrator/Desktop/AI_studio/PaddleDetection/dataset/insect/JPEGImages/test"</span></span><br><span class="line"></span><br><span class="line">files = os.listdir(path)  <span class="comment"># 得到文件夹下所有文件名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> filenames <span class="keyword">in</span> files:</span><br><span class="line"></span><br><span class="line">    filename = filenames.split(sep=<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    results.add(filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(len(results))</span><br><span class="line"></span><br><span class="line">txt_path = <span class="string">"C:/Users/Administrator/Desktop/AI_studio/PaddleDetection/dataset/insect/ImageSets/test.txt"</span></span><br><span class="line"></span><br><span class="line">new_file = open(txt_path,<span class="string">'w+'</span>,encoding=<span class="string">'UTF-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> str <span class="keyword">in</span> results:</span><br><span class="line"></span><br><span class="line">    new_file.write(str+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">new_file.close()</span><br></pre></td></tr></table></figure>
<h2 id="数据集的训练、验证、测试数据集的分割"><a href="#数据集的训练、验证、测试数据集的分割" class="headerlink" title="数据集的训练、验证、测试数据集的分割"></a>数据集的训练、验证、测试数据集的分割</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="string">"""*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*将数据集进行比例分割，分割成train,val,test,*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*生成  train.txt, val.txt,  test.txt,  trainval.txt*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*"""</span>*</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">trainval_percent = <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line">train_percent = <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line">xmlfilepath = <span class="string">'C:/Users/Administrator/Desktop/AI_studio/PaddleDetection/dataset/insect/Annotations'</span></span><br><span class="line"></span><br><span class="line">txtsavepath = <span class="string">'C:/Users/Administrator/Desktop/AI_studio/PaddleDetection/dataset/insect/ImageSets/Main'</span></span><br><span class="line"></span><br><span class="line">total_xml = os.listdir(xmlfilepath)</span><br><span class="line"></span><br><span class="line">num = len(total_xml)</span><br><span class="line"></span><br><span class="line">list = range(num)</span><br><span class="line"></span><br><span class="line">tv = int(num * trainval_percent)</span><br><span class="line"></span><br><span class="line">tr = int(tv * train_percent)</span><br><span class="line"></span><br><span class="line">trainval = random.sample(list, tv)</span><br><span class="line"></span><br><span class="line">train = random.sample(trainval, tr)</span><br><span class="line"></span><br><span class="line">ftrainval = open(<span class="string">'C:/Users/Administrator/Desktop/AI_studio/PaddleDetection/dataset/insect/ImageSets/Main/trainval.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line">ftest = open(<span class="string">'C:/Users/Administrator/Desktop/AI_studio/PaddleDetection/dataset/insect/ImageSets/Main/test.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line">ftrain = open(<span class="string">'C:/Users/Administrator/Desktop/AI_studio/PaddleDetection/dataset/insect/ImageSets/Main/train.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line">fval = open(<span class="string">'C:/Users/Administrator/Desktop/AI_studio/PaddleDetection/dataset/insect/ImageSets/Main/val.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line"></span><br><span class="line">    name = total_xml[i][:<span class="number">-4</span>] + <span class="string">'\n'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> trainval:</span><br><span class="line"></span><br><span class="line">        ftrainval.write(name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> train:</span><br><span class="line"></span><br><span class="line">            ftrain.write(name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            fval.write(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        ftest.write(name)</span><br><span class="line"></span><br><span class="line">ftrainval.close()</span><br><span class="line"></span><br><span class="line">ftrain.close()</span><br><span class="line"></span><br><span class="line">fval.close()</span><br><span class="line"></span><br><span class="line">ftest.close()</span><br></pre></td></tr></table></figure>
<h2 id="文件格式转换-window-转换为unix"><a href="#文件格式转换-window-转换为unix" class="headerlink" title="文件格式转换 window 转换为unix"></a>文件格式转换 window 转换为unix</h2><p><a href="https://www.cnblogs.com/TurboWay/p/9687576.html" target="_blank" rel="noopener">https://www.cnblogs.com/TurboWay/p/9687576.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">import chardet</span><br><span class="line"></span><br><span class="line">def turn(file):</span><br><span class="line">    with open(file, &#39;rb&#39;) as f:</span><br><span class="line">        data &#x3D; f.read()</span><br><span class="line">        encoding &#x3D; chardet.detect(data)[&#39;encoding&#39;]</span><br><span class="line">        data_str &#x3D; data.decode(encoding)</span><br><span class="line">        tp &#x3D; &#39;LF&#39;</span><br><span class="line">        if &#39;\r\n&#39; in data_str:</span><br><span class="line">            tp &#x3D; &#39;CRLF&#39;</span><br><span class="line">            data_str &#x3D; data_str.replace(&#39;\r\n&#39;, &#39;\n&#39;)</span><br><span class="line">        if encoding not in [&#39;utf-8&#39;, &#39;ascii&#39;] or tp &#x3D;&#x3D; &#39;CRLF&#39;:</span><br><span class="line">            with open(file, &#39;w&#39;, newline&#x3D;&#39;\n&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">                f.write(data_str)</span><br><span class="line">            print(f&quot;&#123;file&#125;: (&#123;tp&#125;,&#123;encoding&#125;) trun to (LF,utf-8) success!&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    if sys.argv.__len__() !&#x3D; 2:</span><br><span class="line">        print(f&quot;param: python3 etl_file_check.py &#x2F;home&#x2F;getway&#x2F;script&#x2F;hql&quot;)</span><br><span class="line">    else:</span><br><span class="line">        dr &#x3D; sys.argv[1]</span><br><span class="line">        for path in os.listdir(dr):</span><br><span class="line">            file &#x3D; os.path.join(dr, path)</span><br><span class="line">            if os.path.isfile(file):</span><br></pre></td></tr></table></figure>
<pre><code>            turn(file)
</code></pre><h2 id="2-21日又开始调试了"><a href="#2-21日又开始调试了" class="headerlink" title="2.21日又开始调试了"></a>2.21日又开始调试了</h2><p>今天将数据集搞好后，开始调试训练代码报的错误。还好有大佬们的博客博客帮忙</p>
<p><a href="https://www.cnblogs.com/wind-chaser/p/11359521.html" target="_blank" rel="noopener">https://www.cnblogs.com/wind-chaser/p/11359521.html</a></p>
<p>博客上面一样的问题我就不记录了，下面是自己遇到的问题</p>
<ul>
<li>训练时报错内容是<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cls &#x3D; self._class_to_ind[obj.find(&#39;name&#39;).text.lower().strip()]</span><br></pre></td></tr></table></figure>
网上的说法不尽相同，尝试了几次都没有搞对，后面自己去看了下源代码。简单介绍下<br>源文件的处理过程是先从trainval.txt 中读取出要训练验证的数据是哪些图片和xml，然后程序从对应的xml文件中读取出object标签下的信息，也就是一张图中所有的目标信息，这些目标信息再以程序自己的格式存储下来（也就是定义多个列表，比如位置信息），最后还要存储目标的类别信息，问题就出在这，程序会把读到的类别信息转成小写，然后再去字典（这个字典是几个类别分别对应的索引）查找该类索引，最后记录类别信息也就是记录字典的索引。因为字典中的类别key值有几个是大写，所以没有匹配上就一直报错啦。OK</li>
</ul>
<p>处理完这个错误之后继续训练，报错如下：</p>
<p><img src="https://uploader.shimo.im/f/KYJyz3Trgf8uqk8K.png!thumbnail" alt="图片"></p>
<p>也不知道调试了多久，主要网上没找到相似的情况，所以把我都搞醉了，大概是去原作者的github中的说明中去找步骤，发现以前版本的代码有一个脚本文件，而新版本代码中倒是没有，上面报错的情况大概是配置的问题，有关GPU问题的，而且还是ROIAlign部分出的问题，本来这是Mask RCNN中才有的模块，原作者也说了他们提供了几种pooling技术而且都实现了，所以代码应该是默认用了Mask RCNN中更好的模块替代了 ROI Pooling吧。好了，说这么多其实对于后面解决该问题也没什么逻辑可言。</p>
<p>我直觉觉得可能是模块编译出了问题，所以我就又编译了一下，还是不对。</p>
<p>继续研究目录结构，在将作者的代码clone下来时，lib文件夹下并没有build文件夹，那就很好理解，肯定是编译的时候产生的啦，之前重新编译不行，那就大概率是因为编译文件已经产生了，就没有重新来一遍。我就果断的删除了build文件，重新编译，再次运行训练命令，果真开始训练了。那感觉，确实不错！</p>
<p>后续train_net、 test_net、 demo都试了一下，不知道demo放入的数据是已经训练的数据还是啥原因，看起来也太准了吧。后面再仔细分类一下 百度的AI试虫数据集，把未训练的数据集放入项目中demo一下，看看准确率如何</p>
<p>情况如下：</p>
<p><img src="https://uploader.shimo.im/f/T4iuaM6UYHMvPPZO.jpg!thumbnail" alt="图片"><img src="https://uploader.shimo.im/f/5260tsfjegM8hHJM.jpg!thumbnail" alt="图片"><img src="https://uploader.shimo.im/f/n8FOshyeZhMK7mHO.jpg!thumbnail" alt="图片"><img src="https://uploader.shimo.im/f/U6DibS8yCQMbCFNk.jpg!thumbnail" alt="图片"><img src="https://uploader.shimo.im/f/z6ysr8ZpIRYFAl6w.jpg!thumbnail" alt="图片"><img src="https://uploader.shimo.im/f/eWFDELbds9EJL2V8.jpg!thumbnail" alt="图片"><img src="https://uploader.shimo.im/f/wGqes3JJmCsPdex9.jpg!thumbnail" alt="图片"><img src="https://uploader.shimo.im/f/mSR0sor5RrwQcQX2.jpg!thumbnail" alt="图片"><img src="https://uploader.shimo.im/f/zDJFi99x1kEqZnMX.jpg!thumbnail" alt="图片"><img src="https://uploader.shimo.im/f/3peFDKe5x4Qco8s4.jpg!thumbnail" alt="图片"></p>
<p>第二张和第六张中各有一个小目标都有重复框，第八张的预测不是很理想。后续就要改进这些不足了。还有的是，随机看了一张图 2571.jpg 也就是上面的第三张图  2571.xml中竟然给了七个框，我人都晕了。这是什么情况啊。</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>DL</category>
        <category>AI</category>
      </categories>
      <tags>
        <tag>Faster RCNN</tag>
      </tags>
  </entry>
</search>
